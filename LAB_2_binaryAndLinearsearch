/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
clock_t start,end;

void delay()
{
    for(int i=0;i<10000;i++)
    {
        for(int j=0;j<100;j++){
             
        }
    }
}

int binarysearch(int arr[],int low,int high,int key)
{   delay();
    if(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid]==key)
        {
            return mid;
            
        }
        
        else if(arr[mid]>key)
        {
            binarysearch(arr,low,mid-1,key);
        }
        else{
            binarysearch(arr,mid+1,high,key);
        }
    }
    else{return -1;}
}

int linearsearch(int arr[],int key,int n,int i)
{   delay();
       if(i>=n)
        {
             return -1;
        }
    
        if(arr[i]==key)
        {
            return i;
        }
        
         return linearsearch(arr,key,n,i+1);
    
   
}
int main()
{  int n=1000;
   int arr[5000];
   
   while(n<=5000)
   {
     for(int i=0;i<n;i++)
     {
          arr[i]=i;
     }
     int key=arr[n-1];
   start=clock();
   int idx=binarysearch(arr,0,n-1,key);
   end=clock();
   
   printf("For n=%d\n",n);
   printf("key at index:%d\n",idx);
   printf("For Binarysearch:%f\n",((double)(end-start)/CLOCKS_PER_SEC));
   
   
   start=clock();
   idx=linearsearch(arr,key,n,0);
   end=clock();
   
//    printf("%d\n",idx);
   
   printf("For linearsearch:%f\n",((double)(end-start)/CLOCKS_PER_SEC));
   n=n+1000;
   }

    return 0;
}

